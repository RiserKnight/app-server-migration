{
  "recommendations": [
    {
      "id": 2001,
      "name": "Instantiate initial context as per Portable JNDI Syntax",
      "description": "In JBoss, you instantiate the InitialContext with no argument and then look up the service using the portable JNDI lookup rules: java:global, java:app, java:module. \n Example <code> Context context = new InitialContext();\nService service = (Service) context.lookup( \"java:app/service/\" + ServiceImpl.class.getSimpleName() ); </code>"
    },
    {
      "id": 2002,
      "name": "Replace ServletAuthentication with standard Java EE6 Servlet 3.0 HttpServletRequest for authentication",
      "description": "In JBoss AS 7, you can use the standard Java EE6 Servlet 3.0 HttpServletRequest.login() method to perform programmatic login or you can define a <security-constraint> element in the web.xml file.Example for programmatic login <code>\n    @WebServlet(\"/securedUrlPattern\")\n    @ServletSecurity(@HttpConstraint(rolesAllowed = { \"myRole\" }))\n    @DeclareRoles(\"myRole\")\n    public class SecuredServlet extends HttpServlet {\n\n    //Rest of code\n        String userName = request.getParameter( \"username\" );\n        String password = request.getParameter( \"password\" );\n        try {\n            request.login(userName, password);\n        } catch(ServletException ex) {\n            // handle the error\n        }\n    }\n</code>"
    },
    {
      "id": 2003,
      "name": "The WebLogic NonCatalogLogger is not supported in WildFly/JBoss, It should be replaced with supported logging framework such as the JDK Logger or JBoss Logging",
      "description": "In JBoss, you can use the standard supported logging framework such as the JDK Logger or JBoss Logging. For example <code>\n   import java.util.logging.Logger; \n Logger LOG = Logger.getLogger(\"MyLogger\"); \n</code>"
    },
    {
      "id": 2004,
      "name": "WebLogic interface T3ServicesDef usage not supported in WildFly. The methods in this interface provide access to a facility such as administrative, IO, JDBC, name, log, time, etc.",
      "description": "In JBoss you can use the services by Singleton EJB (using the @Singleton annotation from javax.ejb package) that provides access to the equivalent services from JBoss. <code>\n Reference link https://docs.oracle.com/javaee/6/tutorial/doc/gipvi.html\n</code>"
    },
    {
      "id": 2005,
      "name": "In WebLogic T3StartupDef defines the interface for user-written startup objects, Which is not supported in WildFly.",
      "description": "Need to replace this service by compatible API."
    },
    {
      "id": 2006,
      "name": "In WebLogic The Environment class represents properties used to create an initial Context, Which is not supported in WildFly.",
      "description": "Need to replace this service by compatible API."
    },
    {
      "id": 2007,
      "name": "WebLogic provides several extensions to the JTA specification in the WebLogic.transaction package, Which is not supported in WildFly.",
      "description": "Need to use appropriate classes from the Java EE standard package javax.transaction"
    },
    {
      "id": 2008,
      "name": "WebLogic package contains public WebLogic EJB classes, Which are not supported in WildFly.",
      "description": "Replace classes in weblogic.ejb package with standard JBoss EJB3 or Jakarta ee EJB3 packages."
    },
    {
      "id": 2009,
      "name": "WebLogic provides its own proprietary servlet and filter annotations for dependency injection, Which are not supported in WildFly.",
      "description": "If the application uses them, they must be replaced by the standard Java EE 6 annotations from package javax.servlet.annotation, This package contains a number of annotations that allow users to use annotations to declare servlets, filters, listeners and specify the metadata for the declared component. Example<code>import javax.annotation.security.RunAs;\n    import javax.servlet.annotation.WebServlet;,\n    import javax.servlet.annotation.WebFilter,;\n\n    @WebServlet (\n    name = \"catalog\",\n    initParams = {\n      @WebInitParam (name=\"catalog\", value=\"february\"),\n      @WebInitParam (name=\"language\", value=\"english\")\n    },\n    urlPatterns =, \"/getCatalog/*\",\n    )\n    @RunAs(\"SuperEditor\")\n    public class MyServlet extends HttpServlet { . . . }\n    \n    @WebFilter (\n    filterName = \"catalogFilter\",\n    initParams = { @WebInitParam(name=\"catalog\", value=\"january\") }\n    urlPatterns = {\"/getFilteredCatalog/*\"}\n    )\n    public class MyFilter implements Filter { . . . }</code>"
    },
    {
      "id": 2010,
      "name": "WebLogic ApplicationLifecycleListener used to perform functions or schedule jobs at application server start and stop. This is not supported in WildFly/JBoss",
      "description": "In JBoss can use one of the following methods to achieve results. \n 1.Create a ServletContextListener to perform tasks after application server start and stop. \n 2. Create a Singleton Stateless Session Bean to initialize the singleton session bean at application start"
    },
    {
      "id": 2011,
      "name": "This file is WebLogic proprietary and not supported in WildFly.",
      "description": "The WebLogic weblogic-ejb-jar.xml deployment descriptor file describes elements that are specific to the WebLogic Server. The equivalent file in JBoss is jboss-ejb3.xml, Many of these elements map to it, however some elements map to other descriptor files."
    },
    {
      "id": 2012,
      "name": "This file is WebLogic proprietary and not supported in WildFly.",
      "description": "The WebLogic *-plan.xml deployment descriptor file provides a way to target the application deployment for a specific environment, for example, development, integration testing, quality assurance, or production. In JBoss, you achieve the same outcome using property substitution. Using this technique, you pass the new values to the deployment descriptors based on the deployment environment."
    },
    {
      "id": 2013,
      "name": "This file is WebLogic proprietary and not supported in WildFly.",
      "description": "The weblogic.xml deployment descriptor file is used to support value-added features that are not included in the standard specifications for web applications. Delete the file and Map the Elements from this file to jboss-web.xml"
    },
    {
      "id": 2014,
      "name": "This file is WebLogic proprietary and not supported in WildFly.",
      "description": "The weblogic-application.xml enterprise descriptor file is used to describe WebLogic EAR archives. Delete the file and while there is no direct mapping of these descriptor elements, many of these features can be configured in standard Java EE files like web.xml."
    },
    {
      "id": 2015,
      "name": "This file is WebLogic proprietary and not supported in WildFly.",
      "description": "The weblogic-cmp-rdbms-jar.xml file defines deployment descriptors for a entity EJBs that uses WebLogic Server RDBMS-based persistence services. Delete the file and need to do mapping of these descriptor elements, many of these features can be configured in standard Java EE files."
    },
    {
      "id": 2016,
      "name": "This file is WebLogic proprietary and not supported in WildFly.",
      "description": "The weblogic-jms-jar.xml or *-jms.xml file is WebLogic JMS descriptor file. Delete the file and need to do mapping of these descriptor elements, many of these features can be configured in standard Java EE files."
    }
  ]
}